{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/Title.js","Components/SearchBar.js","Components/Scroll.js","Container/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","name","alt","username","CardList","robots","map","user","i","key","id","Title","href","title","SearchBar","searchField","searchChange","type","placeholder","aria-label","aria-describedby","onChange","Scroll","style","overflowY","height","children","App","this","onFetchRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","fetchRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialSearchState","initialFetchRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a9bd28f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './CSS/Card.css';\r\n\r\nconst Card = (props)=> (\r\n        <div className={\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2\"}>\r\n            <img className={\"bg-sky-blue br-100 pa1 ba b--black-10 h5 w5\"} src={`https://robohash.org/${props.name}?size=200x200`} alt={\"Avatar\"}/>\r\n            <div>\r\n                <h2 className={\"f3 mb2\"}>{props.name}</h2>\r\n                <p className={\"f5 fw4 gray mt0\"}>{props.username}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\nexport default Card;","import Card from './Card';\r\nimport React from 'react';\r\n\r\nconst CardList = ({robots})=> (\r\n        <div>\r\n            {robots.map(\r\n                (user, i) =>\r\n                    (<Card key={i} id={robots[i].id} name={robots[i].name} username={robots[i].username}/>)\r\n            )\r\n            }\r\n        </div>);\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './CSS/Title.css'\r\n\r\nconst Title = () => (\r\n        <nav className=\"bg-custom pa3 pa4-ns\">\r\n            <a className=\"link dim white b f1 f-headline-ns tc db mb3 mb4-ns\" href=\"../index.js\" title=\"Home\">Client List</a>\r\n        </nav>\r\n    );\r\n\r\nexport default Title;","import React from 'react';\r\nimport './CSS/SearchBar.css';\r\n\r\nconst SearchBar = ({searchField, searchChange}) => (\r\n        <div className=\"input-group mb-3\">\r\n            <input type=\"text\" className=\"custom-input\" placeholder=\"Find Friends\"\r\n                   aria-label=\"Find Friends\" aria-describedby=\"button-addon2\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst Scroll = (props)=> (\r\n        <div style={{overflowY: 'scroll', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\nexport default Scroll;","import CardList from \"../Components/CardList\";\r\nimport React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Title from '../Components/Title';\r\nimport SearchBar from '../Components/SearchBar';\r\nimport Scroll from '../Components/Scroll';\r\nimport {setSearchField, fetchingRobots} from \"../actions\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        isPending: state.fetchRobots.isPending,\r\n        robots: state.fetchRobots.robots,\r\n        error: state.fetchRobots.error,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onFetchRobots: () => dispatch(fetchingRobots())\r\n    }\r\n};\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchRobots();\r\n    }\r\n\r\n    render (){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter((robot) => (robot.name.toLowerCase().includes(searchField.toLowerCase())));\r\n        return (\r\n            <div className={\"tc\"}>\r\n                <Title/>\r\n                <SearchBar searchChange={onSearchChange}/>\r\n                {isPending?\r\n                    <h1>Loading</h1>\r\n                    :<Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>}\r\n            </div>\r\n    )}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING ,REQUEST_ROBOTS_SUCCESS ,REQUEST_ROBOTS_FAILED} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const fetchingRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response=>response.json())\r\n    .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n};","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants';\r\n\r\nconst initialSearchState = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialSearchState, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialFetchRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const fetchRobots = (state = initialFetchRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending: false, error: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './Container/App';\nimport {searchRobots, fetchRobots} from \"./reducer\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, fetchRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render(<Provider store={store}><App/></Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}